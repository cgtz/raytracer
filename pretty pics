
	this->allShapes.push_back(new Sphere(vec3(100,300,-300), 600, Material(vec3(1, 0, 0), vec3(1, 0, 0), vec3(1, 1, 1), vec3(0, 0, 0), 4, vec3(0, 0, 0),vec3(0,0,0)), transformation));
	
	this->allShapes.push_back(new Sphere(vec3(-100, 0, 800), 400, Material(vec3(.8, .8, .8), vec3(0, 0, 0), vec3(0, 0, 0), vec3(0, 0, 0),320, vec3(0,0,0),vec3(1,1,1), 2.54), transformation));

	this->allShapes.push_back(new Sphere(vec3(700, 800, 500), 200, Material(vec3(0.5, 0.5, 0.5), vec3(0, 0, 0), vec3(0, 0, 0), vec3(1, 1, 1), 320, vec3(0, 0, 0),vec3(1,1,1), 1.7), transformation));
	
	transformation.push();
	transformation.scale(vec3(4, 4, 10));
	this->allShapes.push_back(new Triangle(vec3(-1000, -300, 0), vec3(0, -800, -2000), vec3(1000, -300, 0), Material(vec3(0, 0, 1), vec3(0, 1.0, 0.6), vec3(1, 1, 1), vec3(1, 1, 1), 16, vec3(0,0, 1), vec3(0, 0, 0)), transformation));
	transformation.pop();
	//this->allPtLights.push_back(PtLight(vec3(1,1,1), vec3(-1000,-500,-1000)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 1), vec3(0,1,0)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 1), vec3(1, 1, 1)));


		this->allShapes.push_back(new Sphere(vec3(0,0,0), 600, Material(vec3(1, 0, 0), vec3(1, 0, 0), vec3(1, 1, 1), vec3(0, 0, 0), 4, vec3(0, 0, 0),vec3(0,0,0)), transformation));
	
	this->allShapes.push_back(new Sphere(vec3(-500, 200, 1000), 400, Material(vec3(0, .8, .2), vec3(0.5, .5, 0), vec3(.3, .3, 0), vec3(1, 1, 1), 10, vec3(0,0,0),vec3(0,0,0)), transformation));

	this->allShapes.push_back(new Sphere(vec3(700, 800, 500), 200, Material(vec3(0,0,1), vec3(0, 0, 0), vec3(0, 0, 0), vec3(1, 1, 1), 320, vec3(0, 0, 0),vec3(0,0,0)), transformation));

	this->allShapes.push_back(new Sphere(vec3(600, -500, 500), 200, Material(vec3(0, 1, 1), vec3(0, .50, .50), vec3(1, 1, 1), vec3(1, 1, 1), 10, vec3(0, 1, 1), vec3(0, 0, 0)), transformation));


	transformation.push();
	transformation.scale(vec3(4, 4, 10));
	this->allShapes.push_back(new Triangle(vec3(-1000, -300, 0), vec3(0, -800, -2000), vec3(1000, -300, 0), Material(vec3(0, 0, 1), vec3(0, 1.0, 0.6), vec3(1, 1, 1), vec3(1, 1, 1), 16, vec3(0,0, 1), vec3(0, 0, 0)), transformation));
	transformation.pop();
	//this->allPtLights.push_back(PtLight(vec3(1,1,1), vec3(500,1000,500)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 1), vec3(0,1,0)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 1), vec3(1, 1, 1)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 0), vec3(-1, -1, 0)));




Things with DOF
==============

	this->transformation.push();
	transformation.scale(vec3(1,1,1));
	this->allShapes.push_back(new Sphere(vec3(0, 0, 0), 500, Material(vec3(0.1, 0.1, 0.1), vec3(0.1, 0, 0.1), vec3(0, 0, 1), vec3(0, 0, 0), 320, vec3(0, 0, 0),vec3(0.9,0.9,0.9), 2.5), transformation));
	transformation.pop();
	this->allShapes.push_back(new Sphere(vec3(-500, -500, -1000), 300, Material(vec3(1, 0, 0), vec3(1, 0, 0), vec3(0, 0, 1), vec3(1, 1, 0), 320, vec3(1, 0, 0),vec3(0.4,0.4,0.4)), transformation));
	this->allShapes.push_back(new Triangle(vec3(-5000, -5000, -100), vec3(10000,-10000,30),vec3(-5000,5000,-50), Material(vec3(0, 0, 0), vec3(0, 1, 1), vec3(1, 1, 1), vec3(1, 1, 1), 320, vec3(0, 0, 0),vec3(0.3,0.3,0.3)), transformation));
	this->allShapes.push_back(new Triangle(vec3(-5000, -5000, -3000), vec3(10000,-10000,-3000),vec3(-5000,5000,-3000), Material(vec3(0, 0, 0), vec3(0, 1, 1), vec3(1, 1, 1), vec3(1, 1, 1), 320, vec3(0, 0, 0),vec3(0,0,0)), transformation));
	//this->allShapes.push_back(new Triangle(vec3(5000, 5000, -3000), vec3(10000,-10000,-3000), vec3(-5000,5000,-3000),Material(vec3(0, 0.5, 0.3), vec3(0, 1, 1), vec3(0, 0, 1), vec3(1, 1, 1), 320, vec3(0, 0, 0),vec3(0,0,0)), transformation));

	this->allShapes.push_back(new Sphere(vec3(1000, 1000, -500), 300, Material(vec3(0.5, 0.5, 0.5), vec3(0, 0, 0), vec3(0, 0, 1), vec3(0, 0, 0),320, vec3(0,0,0),vec3(1,1,1)), transformation));

	this->allShapes.push_back(new Sphere(vec3(0, -100, 500), 300, Material(vec3(0.5, 0.5, 0.5), vec3(0, 0, 0), vec3(0, 0, 1), vec3(0, 0, 0), 320, vec3(0, 0, 0),vec3(1,1,1)), transformation));

	//this->allDirLights.push_back( DirLight(vec3(1, 1, 1), vec3(40, 23, -50)));
	//this->allPtLights.push_back(PtLight(vec3(1,1,1), vec3(0,0,1000)));
	this->allPtLights.push_back(PtLight(vec3(1,1,1), vec3(-1000,500,1000)));


Things with environment mapping
==============================

		this->transformation = Transformation();
	this->depth = depth;
	

			//this->allShapes.push_back(new Sphere(vec3(0,0,0), 600, Material(vec3(1, 0, 0), vec3(1, 0, 0), vec3(1, 1, 1), vec3(0, 0, 0), 4, vec3(0, 0, 0),vec3(0,0,0)), transformation));
	
	//this->allShapes.push_back(new Sphere(vec3(-100, 200, 1000), 100, Material(vec3(0, 0, 0), vec3(0.5, .5, 0), vec3(.3, .3, 0), vec3(1, 1, 1), 10, vec3(0,0,0),vec3(1,1,1)), transformation));

	//this->allShapes.push_back(new Sphere(vec3(0, 0, 0), 100, Material(vec3(0,0,1), vec3(0, 0, 0), vec3(0, 0, 0), vec3(1, 1, 1), 320, vec3(0, 0, 0),vec3(0,0,0)), transformation));

	this->allShapes.push_back(new Sphere(vec3(0, 0, 0), 700, Material(vec3(0.4, 0.8, 0.2), vec3(0, 0.3, 0.8), vec3(1, 0, 1), vec3(0, 0, 0), 10, vec3(0, 0, 0), vec3(0, 0, 0)), transformation));


	transformation.push();
	transformation.scale(vec3(4, 4, 10));
	//this->allShapes.push_back(new Triangle(vec3(-1000, -300, 0), vec3(0, -800, -2000), vec3(1000, -300, 0), Material(vec3(0, 0, 1), vec3(0, 1.0, 0.6), vec3(1, 1, 1), vec3(1, 1, 1), 16, vec3(0,0, 1), vec3(0, 0, 0)), transformation));
	transformation.pop();
	//this->allPtLights.push_back(PtLight(vec3(1,1,1), vec3(500,1000,500)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 1), vec3(0,1,0)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 1), vec3(1, 1, 1)));
	this->allDirLights.push_back(DirLight(vec3(1, 1, 0), vec3(-1, -1, 0)));


	this->camera = Camera(vec3(0, 0, 4000), vec3(0, 0, 0), vec3(0, 1, 0), 40, 680, 680, apR);
	this->film = Film(680, 680);
	this->distrib = distrib;

	this->front = cimg_library::CImg<double>("negz.jpg");
	this->back = cimg_library::CImg<double>("posz.jpg");
	this->left = cimg_library::CImg<double>("negx.jpg");
	this->right = cimg_library::CImg<double>("posx.jpg");
	this->top = cimg_library::CImg<double>("posy.jpg");
	this->bottom = cimg_library::CImg<double>("negy.jpg");